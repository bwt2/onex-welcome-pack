interface Node {
    id: ID!
}

# --- Objects ---
# based on database schema and ER diagram
type User implements Node {
    # -- schema --
    id: ID!
    name: String!
    email: String!
    # -- ER --
    entries: [Entry!]
    homeGym: Gym!
}

type Entry implements Node {
    # -- schema --
    id: ID!
    submissionTime: String!
    data: JSON!
    # -- ER --
    user: User!
    challenge: Challenge!
}

type Challenge implements Node {
    # -- schema --
    id: ID!
    title: String!
    type: String!
    # -- ER --
    entries: [Entry!]
    gym: Gym!
}

type Gym implements Node {
    # -- schema --
    id: ID!
    country: String!
    state: String
    city: String!
    streetAddress: String!
    # -- ER --
    challenges: [Challenge!]
    # homeGymUsers(?)
}

# --- Root ---
type Query {
    node(id: ID!): Node

    user(id: ID!): User
    users: [User!]

    entry(id: ID!): Entry
    entries: [Entry!]

    gym(id: ID!): Gym
    gyms: [Gym!]

    challenge(id: ID!): Challenge
    challenges: [Challenge!]
}

# --- Mutations ---
type Mutation {
    createUser(input: UserInput): User
    createGym(input: GymInput): Gym
    createChallenge(input: ChallengeInput): Challenge
    createEntry(input: EntryInput): Entry

    login(input: LoginInput): User
}

# --- Inputs ---
# based on ER diagram
input UserInput {
  email: String!
  name: String!
  password: String!
  homeGymId: ID!
}

input GymInput {
  country: String!
  state: String
  city: String!
  streetAddress: String!
}

input ChallengeInput {
    gymId: ID!
    title: String!
    type: String!
}

input EntryInput {
    challengeId: ID!
    userId: ID!
    submissionTime: String! # ISO 8601-formatted eg 2024-05-01T12:34:56.789Z
    data: JSON!
}

input LoginInput { 
    email: String!
    password: String!
}

# -- scalars --
scalar JSON